generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  discordWebhooks DiscordWebhook[]
  Notion          Notion[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String?
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model DiscordWebhook {
  id          String  @id @default(cuid())
  webhookId   String
  webhookUrl  String
  webhookName String
  guildId     String
  // guildName   String
  channelId   String
  User        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?

  @@map("discordWebhook")
}

model Notion {
  id                   String  @id @default(cuid())
  botId                String
  workscpaceId         String
  workspaceName        String
  workspaceIcon        String
  owner                Json
  duplicatedTemplateId String?
  User                 User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?

  @@map("notion")
}
